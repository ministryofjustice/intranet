# This file uses a YAML alias, an advanced feature of YAML to avoid duplication.
# It uses a Kubernetes List to define both a Deployment and a Job in one file.

apiVersion: v1
kind: List
items:
  
  # First in the list, define the main Deployment for the application.
  # The fpm container definition is aliased below so it can be reused in the Job definition.
  # This avoids duplication and ensures consistency between the two definitions.

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ${KUBE_NAMESPACE}
      namespace: ${KUBE_NAMESPACE}
      labels:
        app: ${KUBE_NAMESPACE}
    spec:
      replicas: 1
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 0
          maxSurge: 100%
      selector:
        matchLabels:
          app: ${KUBE_NAMESPACE}
      template:
        metadata:
          labels:
            app: ${KUBE_NAMESPACE}
        spec:
          volumes:
            - name: uploads
              emptyDir: { }
            - name: php-socket
              emptyDir: { }
          terminationGracePeriodSeconds: 35
          serviceAccountName: ${KUBE_NAMESPACE}-service
          securityContext:
            runAsNonRoot: true
            seccompProfile:
              type: "RuntimeDefault"
          containers:
            - name: nginx
              image: ${ECR_URL}:${IMAGE_TAG_NGINX}
              resources:
                limits:
                  cpu: 500m
                  memory: 250Mi
                requests:
                  cpu: 50m
                  memory: 100Mi
              ports:
                - containerPort: 8080
                  name: http
              volumeMounts:
                - name: uploads
                  mountPath: /var/www/html/public/app/uploads
                - name: php-socket
                  mountPath: /sock
              securityContext:
                allowPrivilegeEscalation: false
                runAsUser: 101
                capabilities:
                  drop: ["ALL"]
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: 8080
              livenessProbe:
                httpGet:
                  path: /liveness
                  port: 8080
              env:
                - name: IPS_FORMATTED
                  valueFrom:
                    secretKeyRef:
                      name: ${KUBE_NAMESPACE}-base64-secrets
                      key: IPS_FORMATTED

            - name: cron
              image: ${ECR_URL}:${IMAGE_TAG_CRON}
              resources:
                limits:
                  cpu: 50m
                  memory: 30Mi
                requests:
                  cpu: 1m
                  memory: 12Mi
              securityContext:
                allowPrivilegeEscalation: false
                runAsUser: 3001
                capabilities: 
                  drop: ["ALL"]

            - &fpm-container
              # Properties shared between this and the job definition.
              name: fpm
              image: ${ECR_URL}:${IMAGE_TAG_FPM}
              securityContext:
                runAsUser: 101
                allowPrivilegeEscalation: false
                capabilities: 
                  drop: ["ALL"]
              env:
                - name: AWS_S3_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: s3-bucket-output
                      key: bucket_name
                - name: AWS_CLOUDFRONT_PUBLIC_KEYS_OBJECT
                  valueFrom:
                    secretKeyRef:
                      name: cloudfront-output
                      key: cloudfront_public_keys
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: rds-output
                      key: rds_instance_address
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: rds-output
                      key: database_name
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: rds-output
                      key: database_username
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: rds-output
                      key: database_password
                - name: OPENSEARCH_URL
                  valueFrom:
                    secretKeyRef:
                      name: central-digital-product-team-opensearch-proxy-url
                      key: proxy_url
                - name: BASIC_AUTH
                  valueFrom:
                    secretKeyRef:
                      name: basic-auth-secret
                      key: auth
                - name: CACHE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: elasticache-output
                      key: primary_endpoint_address
                - name: CACHE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: elasticache-output
                      key: auth_token
              envFrom:
                - configMapRef:
                    name: ${KUBE_NAMESPACE}
                - secretRef:
                    name: ${KUBE_NAMESPACE}-secrets
                - secretRef:
                    name: ${KUBE_NAMESPACE}-base64-secrets

              # Properties that will be overridden in the following job definition.
              resources:
                limits:
                  # If a pod exceeds its CPU limit, Kubernetes will simply throttle the pod.
                  cpu: "4"
                  # If a pod exceeds its memory limit, Kubernetes will kill the pod.
                  memory: 2000Mi
                requests:
                  cpu: 500m
                  memory: 600Mi
              volumeMounts:
                - name: uploads
                  mountPath: /var/www/html/public/app/uploads
                - name: php-socket
                  mountPath: /sock
              # Check frequently during startup, so that scaling up can happen as fast as possible.
              startupProbe:
                exec:
                  command:
                  - /usr/local/bin/fpm-health/fpm-readiness.sh
                failureThreshold: 20
                periodSeconds: 5
              # Don't route traffic to this pod if the container is not ready.
              readinessProbe:
                exec:
                  command:
                  - /usr/local/bin/fpm-health/fpm-readiness.sh
                periodSeconds: 10
                failureThreshold: 1
              # Restart the container if it fails liveness script.
              livenessProbe:
                exec:
                  command:
                  - /usr/local/bin/fpm-health/fpm-liveness.sh
                periodSeconds: 10

  # Next in the list, define a Job to run initialization tasks using the same FPM container definition.
  # This reuses the fpm container definition above via a YAML alias to avoid duplication.

  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: ${IMAGE_TAG_FPM}
      namespace: ${KUBE_NAMESPACE}
      labels:
        app: ${KUBE_NAMESPACE}-fpm-init
    spec:
      # Delete 10 minutes after finishing
      ttlSecondsAfterFinished: 600
      template:
        metadata:
          labels:
            app: ${KUBE_NAMESPACE}-fpm-init
        spec:
          serviceAccountName: ${KUBE_NAMESPACE}-service
          securityContext:
            runAsNonRoot: true
            runAsUser: 101
            runAsGroup: 101
            seccompProfile:
              type: "RuntimeDefault"
          restartPolicy: Never
          containers:
          - <<: *fpm-container
            # Set the container entrypoint to the init script.
            # Otherwise the fpm service would start instead.
            command:
              - /bin/sh
              - /usr/local/bin/fpm-init.sh
            # Override and add various properties for the deployment's FPM container.
            resources:
              limits:
                cpu: 500m
                memory: 200Mi
              requests:
                cpu: 500m
                memory: 200Mi
            volumeMounts: []
            startupProbe: null
            readinessProbe: null
            livenessProbe: null
